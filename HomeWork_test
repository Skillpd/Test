class InfoMessage:
    """Информационное сообщение о тренировке."""
    def __init__(self, training_type: str, duration: float, distance: float,
                 speed: float, calories: float) -> None:
        self.training_type = training_type
        self.duration = duration
        self.distance = distance
        self.speed = speed
        self.calories = calories

    def get_message(self) -> str:
        return (f'Тип тренировки: {self.training_type}; '
                f'Длительность: {self.duration:.3f} ч.; '
                f'Дистанция: {self.distance:.3f} км; '
                f'Ср. скорость: {self.speed:.3f} км/ч; '
                f'Потрачено ккал: {self.calories:.3f}.')


class Training:
    """Базовый класс тренировки."""
    HOURS_IN_MIN: int = 60
    LEN_STEP: float = 0.65
    M_IN_KM: int = 1000
    TRAINING_TYPE: str = ''

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 ) -> None:
        self.action = action
        self.duration = duration
        self.weight = weight

    def get_distance(self) -> float:
        """Получить дистанцию в км."""
        return self.action * self.LEN_STEP / self.M_IN_KM

    def get_mean_speed(self) -> float:
        """Получить среднюю скорость движения."""
        return self.get_distance() / self.duration

    def get_spent_calories(self) -> float:
        """Получить количество затраченных калорий."""
        pass

    def show_training_info(self) -> InfoMessage:
        """Вернуть информационное сообщение о выполненной тренировке."""
        info_message = InfoMessage(__class__.__name__,
                                   self.duration,
                                   self.get_distance,
                                   self.get_mean_speed,
                                   self.get_spent_calories)
        return info_message


class Running(Training):
    """Тренировка: бег."""
    CAL_MEAN_SPEED_MULTIPLIER = 18
    CAL_MEAN_SPEED_SHIFT = 1.79
    TRAINING_TYPE = 'RUN'

    def get_spent_calories(self) -> float:
        calories_1 = self.CAL_MEAN_SPEED_MULTIPLIER * self.get_mean_speed()
        calories_2 = (calories_1 + self.CAL_MEAN_SPEED_SHIFT) * self.weight
        calories_3 = calories_2 / self.M_IN_KM * self.duration
        calories = calories_3 * self.HOURS_IN_MIN
        return calories


class SportsWalking(Training):
    """Тренировка: спортивная ходьба."""
    WALK_1 = 0.035
    WALK_2 = 2
    WALK_3 = 0.029
    KMH_IN_MS = 0.278
    CENT_IN_METRE = 100
    TRAINING_TYPE = 'WLK'

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 height: float
                 ) -> None:
        super().__init__(action, duration, height)
        self.weight = weight
        self.height = height

    def get_spent_calories(self) -> float:
        calories = (((self.WALK_1 * self.weight) + ((self.get_mean_speed()
                     * self.KMH_IN_MS) ** self.WALK_2
                     / (self.height / self.CENT_IN_METRE))
                     * self.WALK_3 * self.weight)
                    * (self.duration * self.HOURS_IN_MIN))
        return calories


class Swimming(Training):
    """Тренировка: плавание."""
    SWIMM_1 = 1.1
    SWIMM_2 = 2
    LEN_STEP = 1.38
    TRAINING_TYPE = 'SWM'

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 length_pool: int,
                 count_pool: int) -> None:
        super().__init__(action, duration, weight)
        self.length_pool = length_pool
        self.count_pool = count_pool

    def get_mean_speed(self) -> float:
        speed_1 = self.length_pool * self.count_pool
        speed = speed_1 / self.M_IN_KM / self.duration
        return speed

    def get_spent_calories(self) -> float:
        calories_1 = self.get_mean_speed() + self.SWIMM_1
        calories_2 = calories_1 * self.SWIMM_2 * self.weight
        calories = calories_2 * self.duration
        return calories


def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
    workout_types = {'WLK': SportsWalking,
                     'RUN': Running,
                     'SWM': Swimming}
    if workout_type in workout_types:
        workout_class = workout_types[workout_type]
        return workout_class(*data)


def main(training: Training) -> None:
    """Главная функция."""
    info = training.show_training_info()
    return (info.get_message())


if __name__ == '__main__':
    packages = [
        ('SWM', [720, 1, 80, 25, 40]),
        ('RUN', [15000, 1, 75]),
        ('WLK', [9000, 1, 75, 180]),
    ]

    for workout_type, data in packages:
        training = read_package(workout_type, data)
        main(training)
